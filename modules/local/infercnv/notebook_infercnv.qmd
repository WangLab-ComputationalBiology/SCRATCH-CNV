---
title: "Module - inferCNV"
author: "SCRATCH"
execute:
  freeze: auto
  cache: false
  warning: false
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    embed-resources: true
    code-fold: show
    code-tools: true
    fig-format: png
    fig-dpi: 300
    fig-responsive: true
    fig-align: center
lightbox:
    match: auto
    effect: zoom
    loop: true
params:
  project_name: "Test"
  seurat_object: "/Users/affaustino/Projects/dev/btc-scrna-pipeline/Test/Ovarian/data/Ovarian_main_stratification_object.RDS"
  input_model: "human"
  n_threads: 8
  n_memory: 16
  workdir: "/Users/affaustino/Projects/dev/btc-scrna-pipeline/notebook"
  auto_save: true
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE, echo = FALSE}

# Project parameters 
project_name <- params$project_name
project_object <- params$project_object

# Inputs and thresholds
input_model <- params$input_model

# Dataflow/Computational parameters
n_threads <- params$n_threads
n_memory <- params$n_memory

# Output parameters
work_directory <- params$workdir
auto_save <- params$auto_save

```

## Loading library

```{r library}

library(readr)
library(dplyr)
library(ggplot2)
library(Seurat)
library(infercnv)
library(annotables)

```

## Folder structure

```{r project_directory}

if(!dir.exists(work_directory)) {
  dir.create(work_directory, recursive = T)
}

for(sub_directory in c('data', 'figures', 'figures/stratification')) {
  
  dir.create(paste0(work_directory, '/', sub_directory))

}

```

```{r loading_rds}

# Reading seurat object
seurat_object <- readRDS(file = seurat_object)

# Setting random seed
random_seed <- 022003
set.seed(random_seed)

```

## Clustering summary

```{r clustering_summary}

DimPlot(
    seurat_object, 
    reduction = "umap",
    label = TRUE,
    raster = FALSE,
    label.size = 12
  ) +
  theme(
    legend.position = 'top',
    legend.justification = 'center'
  )

```

## Sampling cells

```{r sampling_per_clusters}

# Sampling cell per cluster
cluster_annotation <- seurat_object@meta.data %>%
  tibble::rownames_to_column(var = 'barcode') %>%
  select(barcode, orig.ident, seurat_clusters) %>%
  mutate(
    seurat_clusters = paste0('cluster_', seurat_clusters)
  )

# Categorizing cluster based on size
cluster_size <- table(cluster_annotation$seurat_clusters)
cluster_size_groups <- list(
  'large' = names(cluster_size[cluster_size >= thr_cluster_size]),
  'small' = names(cluster_size[cluster_size <= thr_cluster_size])
)

# Extracting cells per cluster category
large_cluster_members <- cluster_annotation %>%
  filter(seurat_clusters %in% cluster_size_groups$large) %>%
  group_by(seurat_clusters) %>%
  slice_sample(prop = thr_proportion)

small_cluster_members <- cluster_annotation %>%
  filter(seurat_clusters %in% cluster_size_groups$small)

# Formatting sampling vector
sample_cluster_members <- rbind(
  large_cluster_members,
  small_cluster_members
)

sample_cluster_list <- split(
  sample_cluster_members$barcode,
  sample_cluster_members$orig.ident
)

# Printing out
table(sample_cluster_members$seurat_clusters)
sum(table(sample_cluster_members$seurat_clusters))

```

## InferCNV Analysis

```{r infer_cnv_prepare}

seurat_counts <- GetAssayData(seurat_object, layer = "counts")

infer_sample_list <- c(colnames(seurat_list$`SPECTRUM-OV-009`), colnames(seurat_list$`SPECTRUM-OV-022`), colnames(seurat_list$`SPECTRUM-OV-065`))
seurat_counts <- seurat_counts[, infer_sample_list]

infercnv_annotation <- cluster_annotation %>%
  filter(barcode %in% infer_sample_list) %>% 
  select(barcode, seurat_clusters) %>%
  tibble::column_to_rownames(
    var = 'barcode'
  )

```

```{r infercnv_genes}

infercnv_genes <- annotables::grch38 %>%
  filter(biotype == "protein_coding") %>%
  arrange(chr, start) %>%
  distinct(symbol, chr, start, end) %>%
  mutate(
    chr = paste0('chr', chr)
  )

infercnv_genes <- infercnv_genes[!duplicated(infercnv_genes$symbol),]
infercnv_genes <- infercnv_genes %>%
  tibble::column_to_rownames(var = "symbol")

```

```{r infer_cnv_run}

infercnv_object <- infercnv::CreateInfercnvObject(
          raw_counts_matrix = seurat_counts,
          annotations_file = infercnv_annotation,
          delim = "\t",
          gene_order_file = infercnv_genes,
          ref_group_names = NULL,
          chr_exclude = c("chrX", "chrY", "chrM")
          ) 

infercnv_object <- infercnv::run(
          infercnv_object,
          cutoff = 0.1,
          out_dir='./data/infercnv',
          cluster_by_groups = TRUE,
          analysis_mode = 'samples',
          denoise = TRUE,
          HMM = TRUE,
          num_threads = n_threads
          )

```

```{r infercnv_combine_meta}

# Loading infercnv object
seurat_infercnv_object <- seurat_object[,colnames(infercnv_object@expr.data)]
seurat_infercnv_object <- infercnv::add_to_seurat(
    infercnv_output_path = './data/infercnv',
    seurat_obj = seurat_infercnv_object,
    top_n = 10
  )

# Summarizing CNV score
infercnv_summarise_cnv <- seurat_infercnv_object@meta.data %>%
    rowwise() %>% 
    mutate(
      genomwide_cnv_proportion = sum(c_across(starts_with("proportion_scaled_cnv")), na.rm = TRUE),
      n_affected_chromosomes = sum(c_across(starts_with("has_cnv")), na.rm = TRUE)
    )

# 
genomwide_cnv_proportion <- infercnv_summarise_cnv$genomwide_cnv_proportion
n_affected_chromosomes <- infercnv_summarise_cnv$n_affected_chromosomes

# 
seurat_infercnv_object[['genomwide_cnv_proportion']] <- log1p(genomwide_cnv_proportion)
seurat_infercnv_object[['n_affected_chromosomes']] <- n_affected_chromosomes

```

### inferCNV UMAP

```{r infercnv_visualization}

FeaturePlot(seurat_infercnv_object, features = 'genomwide_cnv_proportion') +
  labs(title = "CNV - HMM score")

```

## Saving Seurat object

```{r object_dump}

# Saving full Seurat object
if(auto_save) {
  
  saveRDS(seurat_infercnv_object, file = paste0('./data/', project_name, 'infercnv_meta_object.RDS'))
  
}

```

------------------------------------------------------------------------

## Parameters log

```{r params_log, message = FALSE, warning = FALSE, echo = FALSE}

print(params)

```

## Session info

```{r session_info, message = FALSE, warning = FALSE, echo = FALSE}

sessionInfo()

```
