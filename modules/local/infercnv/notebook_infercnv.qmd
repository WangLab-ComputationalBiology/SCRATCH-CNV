---
title: "Module - inferCNV"
author: "SCRATCH"
execute:
  freeze: auto
  cache: false
  warning: false
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    embed-resources: true
    code-fold: show
    code-tools: true
    fig-format: png
    fig-dpi: 300
    fig-responsive: true
    fig-align: center
lightbox:
    match: auto
    effect: zoom
    loop: true
params:
  project_name: "Test"
  seurat_object: "data/Ovarian_cluster_object.RDS"
  reference_table: "data/Ovarian_reference_table.csv"
  organism: "human"
  input_analysis_mode: 'samples'
  thr_cluster_size: 1000
  n_threads: 8
  n_memory: 16
  work_directory: !expr here::here()
  auto_save: true
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE, echo = FALSE}

# Project parameters 
project_name <- params$project_name
seurat_object <- params$seurat_object
reference_table <- params$reference_table

# Inputs and thresholds
input_model <- params$input_model
input_analysis_mode <- params$input_analysis_mode
thr_cluster_size <- params$thr_cluster_size

# Dataflow/Computational parameters
n_threads <- params$n_threads
n_memory <- params$n_memory

# Output parameters
work_directory <- params$work_directory
auto_save <- params$auto_save

# Changing root directory
knitr::opts_knit$set(
  root.dir = work_directory
)

```

## Loading library

```{r library}

library(readr)
library(dplyr)
library(ggplot2)
library(Seurat)
library(infercnv)
library(annotables)
library(SCP)

```

## Folder structure

```{r project_directory}

if(!dir.exists(work_directory)) {
  dir.create(work_directory, recursive = T)
}

for(sub_directory in c('data', 'figures')) {
  dir.create(paste0(work_directory, '/', sub_directory))
}

```

```{r loading seurat object}
# Reading seurat object
seurat_object <- readRDS(file = seurat_object)
# seurat_object <- readRDS(file = 'Documents/SCRATCH-Annotation-dev/data-Final/SCRATCH_ANNOTATION:AZIMUTH_ANNOTATION/data/project_Azimuth_annotation_object.RDS')
# seurat_object <- readRDS(file = 'Documents/SCRATCH-Annotation-dev/data-Final/SCRATCH_ANNOTATION:SCYTPE_AGGREGATE_ANNOTATION/data/project_sctype_agg_annotation_object.RDS')

```

```{r filtering celltypes by tool type}
if ("azimuth_labels" %in% colnames(seurat_object@meta.data)) {
  reference_label    <- "azimuth_labels"
  cell_types_to_keep <- c("B cell", "Epithelial",
                          "Fibroblast", "T cell")
  reference_grp <- c("B cell", "T cell","Fibroblast")
} else if ("sctype" %in% colnames(seurat_object@meta.data)) {
  reference_label    <- "sctype"
  cell_types_to_keep <- c("B_Plasma_Cells", "Epithelial", "Fibroblast", "T_Cells")
  reference_grp <- c("B_Plasma_Cells", "T_Cells", "Fibroblast")
} else if ("sctype" %in% colnames(seurat_object@meta.data)) {
  reference_label    <- "cell_label"
  cell_types_to_keep <- c("B cell", "Epithelial",
                          "Fibroblast", "T cell")
  reference_grp <- c("B cell", "T cell","Fibroblast")
} else {
  stop("No supported annotation column found")
}

```

```{r loading_rds}



# # Reference population
# reference_table <- readr::read_csv(file = reference_table)
# reference_table <- readr::read_csv(file = 'Documents/SCRATCH-CNV-main/assets/OV_reference_table.csv')
# reference_table <- reference_table %>%
#   tibble::column_to_rownames(var = "barcode") %>%
#   as.data.frame()
# 
# # Add metadata
# seurat_object <- Seurat::AddMetaData(
#   object = seurat_object, 
#   metadata = reference_table
#   )

# Subset Seurat object to retain only epithelial + reference groups
# cell_types_to_keep <- c("Endothelial","Epithelial", "B cell", "T cell", "Fibroblast")
seurat_object$reference_label <- seurat_object@meta.data[[reference_label]]
seurat_object <- subset(seurat_object, subset = reference_label %in% cell_types_to_keep)
# seurat_object$reference_label <- NULL
# table(seurat_object@meta.data$azimuth_labels)

## yibo recommendations: add Endothelial  cells and smooth muscle  cellls and parasite to reference, p

# Setting random seed
random_seed <- 022003
set.seed(random_seed)

```

#| label: fig-clustering
#| fig-cap: 'UMAP by reference_label'
#| column: screen-inset-shaded
#| layout-nrow: 1

tryCatch({
  umap_plot <- SCP::CellDimPlot(
    srt = seurat_object, 
    group.by = "reference_label",
    # split.by = "reference_label",
    reduction = "umap",
    label = TRUE, 
    label_repel = TRUE,
    show_stat = TRUE,
    theme_use = "theme_blank"
  )
  ggsave("umap_reference_groups.png", plot = umap_plot, width = 6, height = 5, dpi = 300)
  print(umap_plot)
}, error = function(e) {
  message("⚠️ Skipping UMAP plot due to rendering error: ", e$message)
})
```
## InferCNV Analysis

:::{.callout-tip}
The @fig-clustering shows highly variable genes on the dataset.
:::

```{r infer_cnv_prepare}

seurat_counts <- GetAssayData(
  seurat_object,
  layer = "counts"
  )

```

```{r infercnv_genes}

# Human only
infercnv_genes <- annotables::grch38 %>%
  filter(biotype == "protein_coding") %>%
  filter(chr %in% 1:22) %>%
  arrange(chr, start) %>%
  distinct(symbol, chr, start, end) %>%
  mutate(
    chr = paste0('chr', chr)
  )

infercnv_genes <- infercnv_genes[!duplicated(infercnv_genes$symbol),]
infercnv_genes <- infercnv_genes %>%
  tibble::column_to_rownames(var = "symbol")

```

```{r infercnv_reference}

reference_table <- seurat_object@meta.data %>%
  dplyr::select(reference_label)

```

```{r infer_cnv_run}


infercnv_object <- infercnv::CreateInfercnvObject(
          raw_counts_matrix = seurat_counts,
          annotations_file  = reference_table,
          delim             = "\t",
          gene_order_file   = infercnv_genes,
          ref_group_names = reference_grp
          )
# ref_group_names   = c("B cell", "T cell", "Fibroblast") -->
# ref_group_names   = c("Fibroblast", "Endothelial", "B cell", "T cell")

infercnv_object <- infercnv::run(
          infercnv_object,
          cutoff = 0.1,
          out_dir='./data/infercnv',
          cluster_by_groups = TRUE,
          analysis_mode = input_analysis_mode,
          denoise = TRUE,
          HMM = TRUE,
          num_threads = n_threads
          )
```

```{r infercnv_combine_meta}

# Loading infercnv object
seurat_infercnv_object <- seurat_object[, colnames(infercnv_object@expr.data)]
seurat_infercnv_object <- infercnv::add_to_seurat(
    infercnv_output_path = './data/infercnv',
    seurat_obj = seurat_infercnv_object,
    top_n = 10
  )

# Summarizing CNV score
infercnv_summarise_cnv <- seurat_infercnv_object@meta.data %>%
    rowwise() %>% 
    mutate(
      genomwide_cnv_proportion = sum(c_across(starts_with("proportion_scaled_cnv")), na.rm = TRUE),
      n_affected_chromosomes = sum(c_across(starts_with("has_cnv")), na.rm = TRUE)
    )

# 
genomwide_cnv_proportion <- infercnv_summarise_cnv$genomwide_cnv_proportion
n_affected_chromosomes <- infercnv_summarise_cnv$n_affected_chromosomes

# 
seurat_infercnv_object[['genomwide_cnv_proportion']] <- log1p(genomwide_cnv_proportion)
seurat_infercnv_object[['n_affected_chromosomes']] <- n_affected_chromosomes

```

### inferCNV UMAP

```{r infercnv_visualization}
#| label: fig-feat-cnv
#| fig-cap: 'CNV Load'
#| column: screen-inset-shaded
#| layout-nrow: 1

FeaturePlot(seurat_infercnv_object, features = 'genomwide_cnv_proportion') +
  labs(title = "CNV - HMM score")

```

:::{.callout-tip}
The @fig-feat-cnv displays CNV load on the UMAP dimensions
:::

## Saving Seurat object

```{r object_dump}

# Saving full Seurat object
if(auto_save) {

  saveRDS(seurat_infercnv_object, file = paste0('./data/', project_name, '_infercnv_meta_object.RDS'))

}

```

------------------------------------------------------------------------

## Parameters log

```{r params_log, message = FALSE, warning = FALSE, echo = FALSE}

print(params)

```

## Session info

```{r session_info, message = FALSE, warning = FALSE, echo = FALSE}

sessionInfo()

```
